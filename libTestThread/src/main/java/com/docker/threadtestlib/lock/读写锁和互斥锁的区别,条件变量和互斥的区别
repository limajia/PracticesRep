回答： 1、参阅排他锁和读写锁的区别：

互斥锁： mutex用于确保始终只有一个线程访问对象。 如果获取锁定失败，线程将进入休眠，并等待解锁后被唤醒。

读写锁定： rwlock分为读锁定和写锁定。 对于读取操作，允许多个线程同时获取读取操作。 但是，一次只能有一个线程获取写锁定。
    无法获取写锁定的其他线程将进入休眠状态，直到释放写锁定。 注意：写锁定会阻止其他读/写锁定。
    如果一个线程获取了写锁定，则其他线程也不会获取读锁定。 书写者优先于读者(一旦有书写者，后续的读者就要等待，清醒时书写者优先)。
    适用于读取数据的频率远远超过写入数据的频率的情况。

回答：2、互斥锁和读写锁的区别：

1 )读写锁区分读者和写入者，但不区分排他锁。
2 )互斥锁允许与读写无关的同时只有一个线程访问该对象； 一次只允许一个书写者进行读写锁定，但允许多位读者同时阅读对象。

回答：3、Linux四种锁定机制：

互斥锁： mutex用于确保始终只有一个线程访问对象。 如果获取锁定失败，线程将进入休眠状态，并等待解锁后被唤醒

读写锁定： rwlock分为读锁定和写锁定。 对于读取操作，允许多个线程同时获取读取操作。
    但是，一次只能有一个线程获取写锁定。 无法获取写锁定的其他线程将进入休眠状态，直到释放写锁定。
    注意：写锁定会阻止其他读/写锁定。 如果一个线程获取了写锁定，则其他线程也不会获取读锁定。
    书写者优先于读者(一旦有书写者，后续的读者就要等待，清醒时书写者优先)。 适用于读取数据的频率远远超过写入数据的频率的情况。

旋转锁定： spinlock，任何时候都只能以同样的方式访问对象。 但是，获得锁定的操作失败时，不进入睡眠，原地旋转直到锁定解除。
    这样可以节省从休眠状态到唤醒的线程消耗，并在锁定时间短的环境中大幅提高效率。 如果锁定时间过长，则会非常浪费CPU资源。

RCU :也就是说，read-copy-update在修改数据时，必须首先读取数据，然后生成副本并修改副本。
    修改完成后，将旧数据更新为新数据。 当使用RCU时，读者不需要很少的同步开销，不需要获得锁定，
    也不需要使用原子指令，因此不需要考虑死锁问题。 如果编写器的同步开销很大，则必须复制更改的数据，
    然后使用锁定机制同步其他编写器的更改操作。 有大量读取操作、少量写入操作时非常有效率。