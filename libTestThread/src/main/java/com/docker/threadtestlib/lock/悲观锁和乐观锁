一.什么是乐观锁和悲观锁
    不管我们互斥锁、自旋锁、重入锁、读写锁、行锁、表锁等等等等这些概念，我把他们都归纳为两种类型，乐观锁和悲观锁
1）乐观锁
首先来看乐观锁，顾名思义，乐观锁就是持比较乐观态度的锁。就是在操作数据时非常乐观，认为别的线程不会同时修改数据，所以不会上锁，但是在更新的时候会判断在此期间别的线程有没有更新过这个数据。
2）悲观锁
反之，悲观锁就是持悲观态度的锁。就在操作数据时比较悲观，每次去拿数据的时候认为别的线程也会同时修改数据，所以每次在拿数据的时候都会上锁，这样别的线程想拿到这个数据就会阻塞直到它拿到锁。

举个例子，有时候我们上公共厕所的时候要排队。如果你蹲马桶的时候开着门，外面有人排着队看着你。
    你会这么做吗？当然，如果在自己家里，有可能会这么干，这就是乐观锁。虽然，能进到房间，但是有人占着坑位，该排队还是得排队（后面这就是验证）。
    若你进厕所，锁死门，就想着后面肯定还会有人进来，这就是悲观锁。

二.常见的乐观锁实现方式有几种

常见的乐观锁实现方式有两种，分别是：1、版本号机制；2、CAS算法。
其中，通过版本号机制实现乐观锁是最经典的方法。版本号机制一般是在数据表中加上一个数据库版本号version字段。
实现方式：
1、版本号机制
一般是说在数据表中加上一个数据库版本号version字段，在表述数据被修改的次数当数据被修改时，它的version 值会加1。
如：
当然线程A需要更新数据值时，在读取数据的同时也会读取 version 值，在提交更新时，
若刚才读取到的 version 值为当前数据库中的 version 值相等时才更新，否则重试更新操作，直到更新成功。

2、CAS 算法
CAS(compare and swap) 比较并交换，有三个操作数，内存地址V ，预期值B，要替换得到的目标子A。
CAS指令执行时，比较内存地址V与预期值B是否相等，若相等则将A赋给B，(不相等则会循环比较直到相等)整个比较赋值操作是一个原子操作。
CAS缺点：
（1）循环时间开销大：当内存地址V与预期值B不相等时会一直循环比较直到相等；
（2）只能保证一个共享变量的原子操作；
（3）如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那么我们就能说明它的值没有被其他线程修改过吗？
    很明显不是，因为在这段时间内它的值可能被改为其他值，然后又被改回A，那CAS操作就会认为它从来没被改过，
    这个问题就被称为 CAS 操作的“ABA” 问题；